---
import { validateApiConfig } from '../lib/zodSchemas';
import { ViewTransitions } from 'astro:transitions';

interface Props {
  title: string;
  description?: string;
}

const { title, description } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    {description && <meta name="description" content={description} />}
    <link href="https://fonts.googleapis.com/css2?family=Fira+Mono&family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet" />
    <ViewTransitions />
  </head>
  <body class="bg-slate-50 text-slate-900 dark:bg-slate-900 dark:text-slate-100 font-sans">
    <slot />

    <script>
      // Check for saved dark mode preference
      function updateTheme() {
        if (
          localStorage.getItem('darkMode') === 'dark' ||
          (!localStorage.getItem('darkMode') &&
            window.matchMedia('(prefers-color-scheme: dark)').matches)
        ) {
          document.documentElement.classList.add('dark');
        } else {
          document.documentElement.classList.remove('dark');
        }
      }

      // Initial theme setup
      updateTheme();

      // Toggle dark mode function
      function toggleDarkMode() {
        document.documentElement.classList.toggle('dark');
        const isDark = document.documentElement.classList.contains('dark');
        localStorage.setItem('darkMode', isDark ? 'dark' : 'light');
      }

      // Set up dark mode toggles
      document.addEventListener('astro:page-load', () => {
        updateTheme();
        
        const darkModeToggles = document.querySelectorAll('[data-toggle-dark]');
        darkModeToggles.forEach((toggle) => {
          toggle.addEventListener('click', toggleDarkMode);
        });

        // Mobile sidebar toggle
        const mobileSidebarToggle = document.getElementById('mobile-sidebar-toggle');
        const sidebar = document.getElementById('sidebar');
        const mobileOverlay = document.getElementById('mobile-sidebar-overlay');
        
        function toggleSidebar() {
          sidebar?.classList.toggle('hidden');
          mobileOverlay?.classList.toggle('hidden');
        }
        
        mobileSidebarToggle?.addEventListener('click', toggleSidebar);
        mobileOverlay?.addEventListener('click', toggleSidebar);
      });
    </script>
  </body>
</html>

<style is:global>
  @tailwind base;
  @tailwind components;
  @tailwind utilities;

  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --primary: 221.2 83.2% 53.3%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --ring: 215 20.2% 65.1%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --primary: 217.2 91.2% 59.8%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 85.7% 97.3%;
    --ring: 217.2 32.6% 17.5%;
  }

  * {
    @apply border-border;
  }

  body {
    @apply antialiased bg-background text-foreground min-h-screen;
  }

  pre code {
    @apply font-mono text-xs leading-relaxed overflow-x-auto;
    font-family: 'Fira Mono', monospace;
  }

  .method-get {
    @apply bg-blue-100 dark:bg-blue-900/50 text-blue-700 dark:text-blue-300;
  }

  .method-post {
    @apply bg-green-100 dark:bg-green-900/50 text-green-700 dark:text-green-300;
  }

  .method-put, .method-patch {
    @apply bg-amber-100 dark:bg-amber-900/50 text-amber-700 dark:text-amber-300;
  }

  .method-delete {
    @apply bg-red-100 dark:bg-red-900/50 text-red-700 dark:text-red-300;
  }

  .status-success {
    @apply bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-300;
  }

  .status-error {
    @apply bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-300;
  }

  .status-info {
    @apply bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-300;
  }
</style>
